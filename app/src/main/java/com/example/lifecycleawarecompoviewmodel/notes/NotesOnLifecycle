
https://developer.android.com/topic/libraries/architecture/lifecycle

Lifecycle

Lifecycle is a class that holds the info. about lifecycle state of a
component(like an activity or a fragment) and allows other objects
to observe this state.

Lifecycle uses 2 main enumerations to track the lifecycle status
for its associated component
1. Event
2. State

LifecycleOwner
LifecycleOwner is a single method interface that denotes that the
class has a Lifecycle. Its has one method , getLifecycle() ,
which must be implemented by the class.
If you r trying to manage the lifecycle of a whole application
process instead , see ProcessLifecycleOwner

For the location tracking ex , we can make the MyLocationListener
class implement LifecycleObserver and then initialize it with
the activity's Lifecycle in the onCreate() method. This allows
the MyLocationListener class to be self-sufficient , meaning that
the logic to react to changes in lifecycle status is declared in
MyLocationListener instead of the activity. Having the individual
components store their own logic makes the activities and fragments
logic easier to manage.
With this implementation , our MyLocationListener class is completely
lifecycle-aware. If we need to use our MyLocationListener from
another activity or fragment , we just need to initialize it.
All of the setup and teardown operations are managed by the class
itself.

Implementing a custom LifecycleOwner
Fragments and activities in supprt library 26.1.0 and later
already implement the LifecycleOwner, u can use the
LifecycleRegistry class, but u need to forward events into that
class , as shown in location example.

Best practices for lifecycle-aware components
1. Keep ur UI controllers(activities , fragments ) as lean as possible
They should not try to acquire their own data , instead use a ViewModel
and observe a LiveData object to reflect the changes back to the views
2. Try to write data-driven UIs where ur UI controller's responsibility
is to update the views as data changes , or notify user actions back
to the ViewModel
3. Put ur data logic in ur ViewModel class. ViewModel should serve
as the connector bet. ur UI controller and the rest of ur app.
But It isn't ViewModel's responsibility to fetch data (e.g from a
network) Instead , ViewModel should call the appropriate component
to fetch data , then provide the result back to the UI controller.
4. Use Data Binding to maintain a clean interface bet. your views
and UI controller. THis allows u to make ur views more declarative
and minimize the update code u need to write in activities,fragments
If u want to have this functionality in Java use library like
ButterKnife.
5. If ur UI is complex consider creating Presenter class to handle
UI modifications. it is laboriuos but make Ui components easy to
test.
6. Avoid referencing a View or Activity context in ViewModel
if ViewModel outlives the activity(in case of configuration changes)
ur activity leaks and isn't properly disposed by the garbage collector
7. Use kotlin coroutines to manage long-running tasks and other
operations that can run asynchronously.

Use cases for lifecycle-aware components
Lifecycle-aware components can make it much easier for u to manage
lifecycles in a variety of cases.
ex.
1. Switching bet. coarse and fine-grained locations updates.
Use lifecycle-aware components to enable fine-grained location
updates while your app is visible and switch to coarse-grained
updates when the app is in the background(read about these 2 terms)
LiveData a lifecycle-aware component , allows ur app to automatically
update UI when ur user chnages location
2. Stopping and starting video buffering
3. Starting and stopping network connectivity
4. Pausing and resuming animated drawables.

Handling on stop events
When a Lifecycle belongs to an AppCompatActivity or Fragment, the Lifecycle's state changes to CREATED and the ON_STOP event is dispatched when the AppCompatActivity or Fragment's onSaveInstanceState() is called.

When a Fragment or AppCompatActivity's state is saved via onSaveInstanceState(), it's UI is considered immutable until ON_START is called. Trying to modify the UI after the state is saved is likely to cause inconsistencies in the navigation state of your application which is why FragmentManager throws an exception if the app runs a FragmentTransaction after state is saved. See commit() for details.

LiveData prevents this edge case out of the box by refraining from calling its observer if the observer's associated Lifecycle isn't at least STARTED. Behind the scenes, it calls isAtLeast() before deciding to invoke its observer.

Unfortunately, AppCompatActivity's onStop() method is called after onSaveInstanceState(), which leaves a gap where UI state changes are not allowed but the Lifecycle has not yet been moved to the CREATED state.

To prevent this issue, the Lifecycle class in version beta2 and lower mark the state as CREATED without dispatching the event so that any code that checks the current state gets the real value even though the event isn't dispatched until onStop() is called by the system.

Unfortunately, this solution has two major problems:

On API level 23 and lower, the Android system actually saves the state of an activity even if it is partially covered by another activity. In other words, the Android system calls onSaveInstanceState() but it doesn't necessarily call onStop(). This creates a potentially long interval where the observer still thinks that the lifecycle is active even though its UI state can't be modified.
Any class that wants to expose a similar behavior to the LiveData class has to implement the workaround provided by Lifecycle version beta 2 and lower.
Note: To make this flow simpler and provide better compatibility with older versions, starting at version 1.0.0-rc1, Lifecycle objects are marked as CREATED and ON_STOP is dispatched when onSaveInstanceState() is called without waiting for a call to the onStop() method. This is unlikely to impact your code but it is something you need to be aware of as it doesn't match the call order in the Activity class in API level 26 and lower.









