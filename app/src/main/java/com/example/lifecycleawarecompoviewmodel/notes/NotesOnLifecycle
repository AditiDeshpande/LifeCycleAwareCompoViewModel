Lifecycle

Lifecycle is a class that holds the info. about lifecycle state of a
component(like an activity or a fragment) and allows other objects
to observe this state.

Lifecycle uses 2 main enumerations to track the lifecycle status
for its associated component
1. Event
2. State

LifecycleOwner
LifecycleOwner is a single method interface that denotes that the
class has a Lifecycle. Its has one method , getLifecycle() ,
which must be implemented by the class.
If you r trying to manage the lifecycle of a whole application
process instead , see ProcessLifecycleOwner

For the location tracking ex , we can make the MyLocationListener
class implement LifecycleObserver and then initialize it with
the activity's Lifecycle in the onCreate() method. This allows
the MyLocationListener class to be self-sufficient , meaning that
the logic to react to changes in lifecycle status is declared in
MyLocationListener instead of the activity. Having the individual
components store their own logic makes the activities and fragments
logic easier to manage.
With this implementation , our MyLocationListener class is completely
lifecycle-aware. If we need to use our MyLocationListener from
another activity or fragment , we just need to initialize it.
All of the setup and teardown operations are managed by the class
itself.

Implementing a custom LifecycleOwner
Fragments and activities in supprt library 26.1.0 and later
already implement the LifecycleOwner, u can use the
LifecycleRegistry class, but u need to forward events into that
class , as shown in location example.

Best practices for lifecycle-aware components
1. Keep ur UI controllers(activities , fragments ) as lean as possible
They should not try to acquire their own data , instead use a ViewModel
and observe a LiveData object to reflect the changes back to the views
2. Try to write data-driven UIs where ur UI controller's responsibility
is to update the views as data changes , or notify user actions back
to the ViewModel
3. Put ur data logic in ur ViewModel class. ViewModel should serve
as the connector bet. ur UI controller and the rest of ur app.
But It isn't ViewModel's responsibility to fetch data (e.g from a
network) Instead , ViewModel should call the appropriate component
to fetch data , then provide the result back to the UI controller.
4. Use Data Binding to maintain a clean interface bet. your views
and UI controller. THis allows u to make ur views more declarative
and minimize the update code u need to write in activities,fragments
If u want to have this functionality in Java use library like
ButterKnife.
5. If ur UI is complex consider creating Presenter class to handle
UI modifications. it is laboriuos but make Ui components easy to
test.
6. Avoid referencing a View or Activity context in ViewModel
if ViewModel outlives the activity(in case of configuration changes)
ur activity leaks and isn't properly disposed by the garbage collector
7. Use kotlin coroutines to manage long-running tasks and other
operations that can run asynchronously.

Use cases for lifecycle-aware components
Lifecycle-aware components can make it much easier for u to manage
lifecycles in a variety of cases.
ex.
1. Switching bet. coarse and fine-grained locations updates.
Use lifecycle-aware components to enable fine-grained location
updates while your app is visible and switch to coarse-grained
updates when the app is in the background(read about these 2 terms)
LiveData a lifecycle-aware component , allows ur app to automatically
update UI when ur user chnages location
2. Stopping and starting video buffering
3. Starting and stopping network connectivity
4. Pausing and resuming animated drawables.








